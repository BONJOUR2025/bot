import json
import re
import datetime
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, ConversationHandler

from ...config import (
    ADMIN_CHAT_ID,
    USERS_FILE,
    MAX_ADVANCE_AMOUNT_PER_MONTH,
)
from ...services.users import load_users_map, save_users, add_user, update_user, delete_user
from ...services.advance_requests import load_advance_requests
from ...keyboards.reply_user import get_cabinet_menu, get_main_menu
from ...utils.logger import log


async def personal_cabinet(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    state = context.application.chat_data.get(chat_id, {}).get("conversation")
    log(f"[FSM] state before entry: {state}")
    user_id = str(update.effective_user.id)
    users = load_users_map()
    user = users.get(user_id)
    if not user:
        await update.message.reply_text(
            "‚ùå –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_main_menu(),
        )
        return
    name = user.get("name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    await update.message.reply_text(
        f"üë§ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç, {name}!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_cabinet_menu(),
    )
    return ConversationHandler.END


async def view_user_info(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = str(update.effective_user.id)
    users = load_users_map()
    user = users.get(user_id)
    if not user:
        await update.message.reply_text(
            "‚ùå –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=get_main_menu()
        )
        return
    info_text = (
        f"üìã –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
        f"–ò–º—è: {user.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"–§–ò–û: {user.get('full_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {user.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"–ë–∞–Ω–∫: {user.get('bank', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üéÇ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: {user.get('birthdate', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}"
    )
    await update.message.reply_text(info_text, reply_markup=get_cabinet_menu())


async def edit_user_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from ...keyboards.reply_user import get_edit_keyboard

    reply_markup = get_edit_keyboard()
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        await query.message.reply_text(
            "‚úèÔ∏è –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=reply_markup
        )
    elif update.message:
        await update.message.reply_text(
            "‚úèÔ∏è –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=reply_markup
        )
    else:
        log("‚ùå [edit_user_info] –ù–µ—Ç message –∏ callback_query –≤ update")


async def handle_edit_selection(update: Update,
                                context: ContextTypes.DEFAULT_TYPE) -> None:
    choice = update.message.text.strip()
    log(f"DEBUG [handle_edit_selection] –í—ã–±–æ—Ä: {choice}")
    if choice == "üì± –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω":
        context.user_data["edit_field"] = "phone"
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (11 —Ü–∏—Ñ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä, 89012345678):"
        )
    elif choice == "üè¶ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–Ω–∫":
        context.user_data["edit_field"] = "bank"
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞ (–¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤, —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã):"
        )
    else:
        await update.message.reply_text(
            "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.", reply_markup=get_cabinet_menu()
        )
        return
    context.user_data["awaiting_new_value"] = True
    log(
        f"DEBUG [handle_edit_selection] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã edit_field: {context.user_data.get('edit_field')}, awaiting_new_value: {context.user_data.get('awaiting_new_value')}"
    )


async def save_new_value(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE) -> None:
    if context.user_data.get("payout_request"):
        return
    if not context.user_data.get("awaiting_new_value"):
        return
    log(
        f"DEBUG [save_new_value] –¢–µ–∫—Å—Ç: '{update.message.text if update.message else ''}', context.user_data: {context.user_data}"
    )
    new_value = update.message.text.strip()
    field = context.user_data.get("edit_field")
    if field == "phone":
        if not re.match(r"^\d{11}$", new_value):
            await update.message.reply_text(
                "‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 11 —Ü–∏—Ñ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, 89012345678). –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:"
            )
            return
    elif field == "bank":
        if len(new_value) > 50 or not re.match(
                r"^[a-zA-Z–∞-—è–ê-–Ø0-9\s]+$", new_value):
            await update.message.reply_text(
                "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø—Ä–æ–±–µ–ª—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:"
            )
            return
    keyboard = InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{field}_{new_value}")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_edit")],
        ]
    )
    await update.message.reply_text(
        f"–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {field}: {new_value}\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ:",
        reply_markup=keyboard,
    )
    context.user_data["awaiting_new_value"] = False
    log(
        f"DEBUG [save_new_value] –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è {field}: {new_value}"
    )


async def handle_edit_confirmation(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    data = query.data
    if data == "cancel_edit":
        await query.edit_message_text("‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)
        context.user_data.pop("edit_field", None)
        context.user_data.pop("editing_info", None)
        await context.bot.send_message(
            chat_id=query.from_user.id,
            text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.",
            reply_markup=get_cabinet_menu(),
        )
        return
    if data.startswith("confirm_"):
        _, field, new_value = data.split("_", 2)
        user_id = str(query.from_user.id)
        users = load_users_map()
        if user_id not in users:
            await query.edit_message_text("‚ùå –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=None)
            context.user_data.clear()
            await context.bot.send_message(
                chat_id=user_id,
                text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=get_main_menu(),
            )
            return
        users[user_id]["pending_change"] = {"field": field, "value": new_value}
        save_users(users)
        log(
            f"DEBUG [handle_edit_confirmation] –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–ª—è {user_id}: {field} ‚Üí {new_value}"
        )
        admin_message = (
            f"üîî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {users[user_id]['name']} —Ö–æ—á–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ:\n"
            f"–ü–æ–ª–µ: {field}\n"
            f"–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {new_value}"
        )
        keyboard = InlineKeyboardMarkup(
            [
                [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_change_{user_id}")],
                [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_change_{user_id}")],
            ]
        )
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID, text=admin_message, reply_markup=keyboard
        )
        await query.edit_message_text(
            f"‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ {field} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.",
            reply_markup=None,
        )
        await context.bot.send_message(
            chat_id=user_id,
            text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.",
            reply_markup=get_cabinet_menu(),
        )
        context.user_data.pop("edit_field", None)
        context.user_data.pop("editing_info", None)


async def handle_admin_change_response(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    data = query.data
    if data.startswith("approve_change_"):
        user_id = data.split("_")[-1]
        users = load_users_map()
        if user_id not in users:
            await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        pending_change = users[user_id].get("pending_change", {})
        field = pending_change.get("field")
        new_value = pending_change.get("value")
        if not field or not new_value:
            await query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        old_value = users[user_id].get(field, "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        users[user_id][field] = new_value
        del users[user_id]["pending_change"]
        save_users(users)
        log(
            f"‚úÖ [admin_change] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–±–Ω–æ–≤–∏–ª {field}: {old_value} ‚Üí {new_value}"
        )
        await query.edit_message_text(
            f"‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ {field} –¥–ª—è {users[user_id]['name']} –æ–¥–æ–±—Ä–µ–Ω–æ: {new_value}"
        )
        await context.bot.send_message(
            chat_id=user_id,
            text=f"‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ {field} –æ–¥–æ–±—Ä–µ–Ω: {new_value}",
            reply_markup=get_cabinet_menu(),
        )
    elif data.startswith("reject_change_"):
        user_id = data.split("_")[-1]
        users = load_users_map()
        if user_id not in users:
            await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        pending_change = users[user_id].get("pending_change", {})
        field = pending_change.get("field")
        new_value = pending_change.get("value")
        if "pending_change" in users[user_id]:
            del users[user_id]["pending_change"]
            save_users(users)
        log(
            f"‚ùå [admin_change] –ò–∑–º–µ–Ω–µ–Ω–∏–µ {field} –¥–ª—è {user_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: {new_value}")
        await query.edit_message_text(
            f"‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ {field} –¥–ª—è {users[user_id]['name']} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ."
        )
        await context.bot.send_message(
            chat_id=user_id,
            text=f"‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ {field} –æ—Ç–∫–ª–æ–Ω—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=get_cabinet_menu(),
        )


async def view_request_history(update: Update,
                               context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = str(update.effective_user.id)
    try:
        requests_list = load_advance_requests()
        if not isinstance(requests_list, list):
            log(
                f"‚ùå [view_request_history] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ advance_requests: {requests_list}"
            )
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=get_cabinet_menu(),
            )
            return
    except Exception as e:
        log(
            f"‚ùå [view_request_history] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è user_id {user_id}: {e}"
        )
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_cabinet_menu(),
        )
        return
    user_requests = [r for r in requests_list if r["user_id"] == user_id][-5:]
    current_month = datetime.datetime.now().strftime("%Y-%m")
    user_advance_requests = [
        r
        for r in requests_list
        if r["user_id"] == user_id
        and r["status"] == "–û–¥–æ–±—Ä–µ–Ω–æ"
        and r["timestamp"].startswith(current_month)
        and (r.get("payout_type") in ["–ê–≤–∞–Ω—Å", None] or "payout_type" not in r)
    ]
    total_advance_amount = sum(int(r.get("amount", 0))
                               for r in user_advance_requests)
    remaining_amount = MAX_ADVANCE_AMOUNT_PER_MONTH - total_advance_amount
    if not user_requests:
        await update.message.reply_text(
            f"üìú –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É.\n–ê–≤–∞–Ω—Å—ã –∑–∞ {current_month}: {total_advance_amount} ‚ÇΩ –∏–∑ {MAX_ADVANCE_AMOUNT_PER_MONTH} ‚ÇΩ",
            reply_markup=get_cabinet_menu(),
        )
        return
    history_text = "üìú –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5):\n\n"
    for req in reversed(user_requests):
        status_text = {
            "–û–∂–∏–¥–∞–µ—Ç": "‚è≥ –û–∂–∏–¥–∞–µ—Ç",
            "–û–¥–æ–±—Ä–µ–Ω–æ": "‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ",
            "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ": "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ",
            "–û—Ç–º–µ–Ω–µ–Ω–æ": "üö´ –û—Ç–º–µ–Ω–µ–Ω–æ",
        }.get(req["status"], "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        history_text += (
            f"–¢–∏–ø: {req.get('payout_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} ({req.get('method', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')})\n"
            f"–°—É–º–º–∞: {req.get('amount', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} ‚ÇΩ\n"
            f"–°—Ç–∞—Ç—É—Å: {status_text}\n"
            f"–î–∞—Ç–∞: {req.get('timestamp', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
        )
    history_text += f"–ê–≤–∞–Ω—Å—ã –∑–∞ {current_month}: {total_advance_amount} ‚ÇΩ –∏–∑ {MAX_ADVANCE_AMOUNT_PER_MONTH} ‚ÇΩ\n–û—Å—Ç–∞—Ç–æ–∫: {remaining_amount} ‚ÇΩ"
    await update.message.reply_text(
        history_text.strip(), reply_markup=get_cabinet_menu()
    )
    log(
        f"DEBUG [view_request_history] –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è user_id: {user_id}")
    context.user_data.clear()
