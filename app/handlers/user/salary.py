import os
import pandas as pd
from telegram import Update
from telegram.ext import ContextTypes
from typing import Optional
from ...utils.image import create_combined_table_image
from ...services.report import generate_employee_report
from ...services.excel import load_data
from ...services.users import load_users_map
from ...utils.logger import log


async def handle_salary_request(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∑–∞—Ä–ø–ª–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if not update.message:
        return

    month: str = update.message.text.strip().upper()
    user_id: str = str(update.effective_user.id)
    valid_months = [
        "–Ø–ù–í–ê–†–¨",
        "–§–ï–í–†–ê–õ–¨",
        "–ú–ê–†–¢",
        "–ê–ü–†–ï–õ–¨",
        "–ú–ê–ô",
        "–ò–Æ–ù–¨",
        "–ò–Æ–õ–¨",
        "–ê–í–ì–£–°–¢",
        "–°–ï–ù–¢–Ø–ë–†–¨",
        "–û–ö–¢–Ø–ë–†–¨",
        "–ù–û–Ø–ë–†–¨",
        "–î–ï–ö–ê–ë–†–¨",
    ]

    log(
        f"üìå [handle_salary_request] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –º–µ—Å—è—Ü: {month}"
    )

    if month not in valid_months:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Å—è—Ü. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö."
        )
        return

    loading_message = await update.message.reply_text(
        "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, —Å—á–∏—Ç–∞—é –¥–µ–Ω–µ–∂–∫–∏..."
    )

    await context.bot.send_chat_action(
        chat_id=update.message.chat_id, action="typing"
    )

    data: Optional[pd.DataFrame] = load_data(sheet_name=month)
    if data is None or "–ò–ú–Ø" not in data.columns:
        await loading_message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–µ—Å—è—Ü–∞ {month}."
        )
        return

    users = load_users_map()
    user = users.get(user_id)
    if not user:
        await loading_message.edit_text(
            "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        return

    user_name: str = user.get("name")
    log(f"‚úÖ [handle_salary_request] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {user_name}")

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏–º–µ–Ω–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    data["–ò–ú–Ø"] = data["–ò–ú–Ø"].astype(str).str.strip()
    employee_data = data[data["–ò–ú–Ø"] == user_name]

    if employee_data.empty:
        await loading_message.edit_text(
            f"‚ùå –î–∞–Ω–Ω—ã–µ –∑–∞ {month} –¥–ª—è {user_name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é."
        )
        return

    row_index = employee_data.index[0]

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞
    report_tables = generate_employee_report(user_name, month, data, row_index)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞
    filename = create_combined_table_image(
        report_tables, f"salary_report_{user_id}.png"
    )

    if filename and os.path.exists(filename):
        try:
            await loading_message.delete()
        except Exception as e:
            log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        with open(filename, "rb") as photo:
            await update.message.reply_photo(photo=photo)
    else:
        await loading_message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞."
        )
