from __future__ import annotations

import datetime
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, ConversationHandler

from ...constants import PAYMENT_REQUEST_PATTERN, PayoutStates
from ...config import MAX_ADVANCE_AMOUNT_PER_MONTH
from ...services.users import load_users_map
from ...services.advance_requests import (
    check_pending_request,
    load_advance_requests,
    log_new_request,
)
from ...services.telegram_service import TelegramService
from app.data.employee_repository import EmployeeRepository
from ...utils.logger import log


async def request_payout_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> PayoutStates:
    """Start payout request conversation."""
    chat_id = update.effective_chat.id
    state = context.application.chat_data.get(chat_id, {}).get("conversation")
    log(f"[FSM] state before entry: {state}")

    user_id = str(update.effective_user.id)

    if check_pending_request(user_id):
        await update.message.reply_text(
            "‚ùó –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏.",
            reply_markup=ReplyKeyboardMarkup([["üè† –î–æ–º–æ–π"]], resize_keyboard=True),
        )
        return ConversationHandler.END

    users = load_users_map()
    user = users.get(user_id)
    if not user:
        await update.message.reply_text(
            "‚ùå –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=ReplyKeyboardMarkup([["üè† –î–æ–º–æ–π"]], resize_keyboard=True),
        )
        return ConversationHandler.END

    if not user.get("card_number"):
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=ReplyKeyboardMarkup([["üè† –î–æ–º–æ–π"]], resize_keyboard=True),
        )
        return ConversationHandler.END

    context.user_data["payout_data"] = {
        "user_id": user_id,
        "name": user.get("name", ""),
        "phone": user.get("phone", ""),
        "bank": user.get("bank", ""),
        "card_number": user.get("card_number", ""),
    }
    context.user_data["payout_in_progress"] = True

    keyboard = ReplyKeyboardMarkup(
        [["–ê–≤–∞–Ω—Å", "–ó–∞—Ä–ø–ª–∞—Ç–∞"], ["üè† –î–æ–º–æ–π"]], resize_keyboard=True
    )
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤—ã–ø–ª–∞—Ç—ã:", reply_markup=keyboard
    )
    return PayoutStates.SELECT_TYPE


async def select_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> PayoutStates:
    payout_type = update.message.text.strip()
    if payout_type not in {"–ê–≤–∞–Ω—Å", "–ó–∞—Ä–ø–ª–∞—Ç–∞"}:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
        )
        return PayoutStates.SELECT_TYPE
    context.user_data.setdefault("payout_data", {})["payout_type"] = payout_type
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
    return PayoutStates.ENTER_AMOUNT


async def enter_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> PayoutStates:
    text = update.message.text.strip()
    if not text.isdigit() or int(text) <= 0:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return PayoutStates.ENTER_AMOUNT

    amount = int(text)
    data = context.user_data.setdefault("payout_data", {})
    user_id = data.get("user_id")

    # check monthly limit for advances
    if data.get("payout_type") == "–ê–≤–∞–Ω—Å":
        now_month = datetime.datetime.now().strftime("%Y-%m")
        requests = load_advance_requests()
        total = sum(
            int(r.get("amount", 0))
            for r in requests
            if r.get("user_id") == user_id
            and r.get("timestamp", "").startswith(now_month)
            and r.get("status") in {"–û–¥–æ–±—Ä–µ–Ω–æ", "–û–∂–∏–¥–∞–µ—Ç"}
            and (r.get("payout_type") in ["–ê–≤–∞–Ω—Å", None] or "payout_type" not in r)
        )
        if total + amount > MAX_ADVANCE_AMOUNT_PER_MONTH:
            await update.message.reply_text(
                "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –º–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç –∞–≤–∞–Ω—Å–æ–≤.",
                reply_markup=ReplyKeyboardMarkup([["üè† –î–æ–º–æ–π"]], resize_keyboard=True),
            )
            context.user_data.clear()
            return ConversationHandler.END

    data["amount"] = amount
    keyboard = ReplyKeyboardMarkup(
        [["üí≥ –ù–∞ –∫–∞—Ä—Ç—É", "üè¶ –ò–∑ –∫–∞—Å—Å—ã", "ü§ù –ù–∞–ª–∏—á–Ω—ã–º–∏"], ["üè† –î–æ–º–æ–π"]],
        resize_keyboard=True,
    )
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è:", reply_markup=keyboard
    )
    return PayoutStates.SELECT_METHOD


async def select_method(update: Update, context: ContextTypes.DEFAULT_TYPE) -> PayoutStates:
    method = update.message.text.strip()
    if method not in {"üí≥ –ù–∞ –∫–∞—Ä—Ç—É", "üè¶ –ò–∑ –∫–∞—Å—Å—ã", "ü§ù –ù–∞–ª–∏—á–Ω—ã–º–∏"}:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
        )
        return PayoutStates.SELECT_METHOD

    data = context.user_data.setdefault("payout_data", {})
    data["method"] = method

    text = (
        f"–¢–∏–ø: {data.get('payout_type')}\n"
        f"–°—É–º–º–∞: {data.get('amount')} ‚ÇΩ\n"
        f"–ú–µ—Ç–æ–¥: {method}"
    )
    if method == "üí≥ –ù–∞ –∫–∞—Ä—Ç—É":
        card = data.get("card_number") or "‚Äî"
        bank = data.get("bank") or "‚Äî"
        text = f"–ö–∞—Ä—Ç–∞: {card}\n–ë–∞–Ω–∫: {bank}\n\n" + text

    keyboard = InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="payout_confirm")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="payout_cancel")],
        ]
    )
    await update.message.reply_text(text, reply_markup=keyboard)
    return PayoutStates.CONFIRM_CARD


async def confirm_card(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    if not query:
        return ConversationHandler.END
    await query.answer()
    data = context.user_data.get("payout_data", {})

    if query.data == "payout_cancel":
        await query.edit_message_text("‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω.")
        context.user_data.clear()
        return ConversationHandler.END

    record = log_new_request(
        data.get("user_id"),
        data.get("name", ""),
        data.get("phone", ""),
        data.get("card_number", ""),
        data.get("bank", ""),
        data.get("amount"),
        data.get("method"),
        data.get("payout_type"),
    )

    telegram_service = TelegramService(EmployeeRepository())
    try:
        await telegram_service.send_payout_request_to_admin(record)
    except Exception as exc:
        log(f"‚ùå Failed to notify admin: {exc}")

    await query.edit_message_text("‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    context.user_data.clear()
    return ConversationHandler.END
