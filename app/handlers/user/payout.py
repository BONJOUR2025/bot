from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, ConversationHandler

from ...config import (
    ADMIN_CHAT_ID,
    MAX_ADVANCE_AMOUNT_PER_MONTH,
    CARD_DISPATCH_CHAT_ID,
)
from ...services.users import load_users, save_users
from ...services.advance_requests import (
    log_new_request,
    check_pending_request,
    load_advance_requests,
)
from ...keyboards.reply_user import get_main_menu
from ...utils.logger import log

from ...constants import PayoutStates


async def request_payout_user(update: Update,
                              context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = str(update.effective_user.id)
    log(f"DEBUG [request_payout_user] –ó–∞–ø—Ä–æ—Å –≤—ã–ø–ª–∞—Ç—ã –æ—Ç user_id: {user_id}")
    users = load_users()
    if user_id not in users:
        if update.message:
            await update.message.reply_text(
                "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=get_main_menu()
            )
        return ConversationHandler.END
    if check_pending_request(user_id):
        if update.message:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å.",
                reply_markup=get_main_menu(),
            )
        log(
            f"DEBUG [request_payout_user] –û–±–Ω–∞—Ä—É–∂–µ–Ω pending-–∑–∞–ø—Ä–æ—Å –¥–ª—è {user_id}")
        return ConversationHandler.END
    requests_list = load_advance_requests()
    total_advance_amount = sum(
        req["amount"]
        for req in requests_list
        if req["user_id"] == user_id and req["status"] == "–û–¥–æ–±—Ä–µ–Ω–æ"
    )
    log(
        f"DEBUG [request_payout_user] total_advance_amount: {total_advance_amount}")
    if total_advance_amount >= MAX_ADVANCE_AMOUNT_PER_MONTH:
        if update.message:
            await update.message.reply_text(
                f"‚ùå –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –∞–≤–∞–Ω—Å–∞ ({MAX_ADVANCE_AMOUNT_PER_MONTH} ‚ÇΩ).",
                reply_markup=get_main_menu(),
            )
        log(f"DEBUG [request_payout_user] –õ–∏–º–∏—Ç –∞–≤–∞–Ω—Å–∞ –ø—Ä–µ–≤—ã—à–µ–Ω –¥–ª—è {user_id}")
        return ConversationHandler.END
    keyboard = [["–ê–≤–∞–Ω—Å", "–ó–∞—Ä–ø–ª–∞—Ç–∞"], ["üè† –î–æ–º–æ–π"]]
    if update.message:
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤—ã–ø–ª–∞—Ç—ã:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard, resize_keyboard=True, one_time_keyboard=True
            ),
        )
    log(
        "DEBUG [request_payout_user] –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ PayoutStates.SELECT_TYPE"
    )
    return PayoutStates.SELECT_TYPE


async def handle_payout_type_user(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE):
    payout_type = update.message.text
    user_id = str(update.effective_user.id)
    log(f"DEBUG [handle_payout_type_user] –í—ã–±—Ä–∞–Ω —Ç–∏–ø –≤—ã–ø–ª–∞—Ç—ã: {payout_type}")
    if "payout_data" not in context.user_data:
        context.user_data["payout_data"] = {}
    context.user_data["payout_data"]["payout_type"] = payout_type
    context.user_data["awaiting_amount"] = True
    await update.message.reply_text(
        "üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–ø–ª–∞—Ç—ã —Ü–∏—Ñ—Ä–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10000):"
    )
    return PayoutStates.ENTER_AMOUNT


async def handle_payout_amount_user(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()
    log(
        f"DEBUG [handle_payout_amount_user] –¢–µ–∫—Å—Ç: '{text}', awaiting_amount: {
            context.user_data.get('awaiting_amount')}")
    if not text.isdigit():
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É —Ü–∏—Ñ—Ä–∞–º–∏.")
        return PayoutStates.ENTER_AMOUNT
    amount = int(text)
    payout_data = context.user_data.get("payout_data", {})
    payout_type = payout_data.get("payout_type")
    if not payout_type:
        await update.message.reply_text(
            "‚ùå –¢–∏–ø –≤—ã–ø–ª–∞—Ç—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞."
        )
        return ConversationHandler.END
    context.user_data["payout_data"] = {
        "amount": amount,
        "payout_type": payout_type,
        "method": payout_data.get("method"),
        "awaiting_amount": False,
    }
    log(
        f"DEBUG [handle_payout_amount_user] –°—É–º–º–∞ {amount} –ø—Ä–∏–Ω—è—Ç–∞ –¥–ª—è user_id: {user_id}, –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞"
    )
    keyboard = [["üè¶ –ò–∑ –∫–∞—Å—Å—ã", "üí≥ –ù–∞ –∫–∞—Ä—Ç—É", "ü§ù –ù–∞–ª–∏—á–Ω—ã–º–∏"], ["üè† –î–æ–º–æ–π"]]
    reply_markup = ReplyKeyboardMarkup(
        keyboard, resize_keyboard=True, one_time_keyboard=False
    )
    await update.message.reply_text(
        "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–ø–ª–∞—Ç—ã:", reply_markup=reply_markup
    )
    return PayoutStates.SELECT_METHOD


async def payout_method_user(update: Update,
                             context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    method = update.message.text
    payout_data = context.user_data.get("payout_data", {})
    payout_data["method"] = method
    context.user_data["payout_data"] = payout_data
    log(
        f"DEBUG [payout_method_user] –í—ã–±—Ä–∞–Ω –º–µ—Ç–æ–¥: {method} –¥–ª—è user_id: {user_id}")
    if method == "üí≥ –ù–∞ –∫–∞—Ä—Ç—É":
        users = load_users()
        user_info = users.get(str(user_id), {})
        name = user_info.get("name", "‚Äî")
        phone = user_info.get("phone", "‚Äî")
        bank = user_info.get("bank", "‚Äî")
        card_text = (
            f"üßæ –¢–µ–∫—É—â–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n\nüë§ –ò–º—è: {name}\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\nüè¶ –ë–∞–Ω–∫: {bank}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å."
        )
        keyboard = InlineKeyboardMarkup(
            [
                [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_card")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_card")],
            ]
        )
        await update.message.reply_text(card_text, reply_markup=keyboard)
        return PayoutStates.CONFIRM_CARD
    else:
        return await confirm_payout_user(update, context)


async def handle_card_confirmation(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = str(query.from_user.id)
    await query.answer()
    log(
        f"DEBUG [handle_card_confirmation] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è user_id: {user_id}")
    payout_data = context.user_data.get("payout_data", {})
    method = payout_data.get("method")
    amount = payout_data.get("amount")
    payout_type = payout_data.get("payout_type")
    if not all([amount, method, payout_type]):
        log(
            f"‚ùå [handle_card_confirmation] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {
                amount=}, {
                method=}, {
                payout_type=}")
        await query.edit_message_text(
            "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö."
        )
        return ConversationHandler.END
    card_info = context.user_data.get("card_temp")
    if not card_info:
        users = load_users()
        user_info = users.get(user_id, {})
        card_info = {
            "name": user_info.get("name", "‚Äî"),
            "phone": user_info.get("phone", "‚Äî"),
            "bank": user_info.get("bank", "‚Äî"),
        }
    name = card_info.get("name")
    phone = card_info.get("phone")
    bank = card_info.get("bank")
    users = load_users()
    if user_id in users:
        users[user_id]["name"] = name
        users[user_id]["phone"] = phone
        users[user_id]["bank"] = bank
        save_users(users)
    try:
        log(f"DEBUG [handle_card_confirmation] –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è {user_id}")
        log_new_request(
            user_id,
            name,
            phone,
            bank,
            amount,
            method,
            payout_type)
    except Exception as e:
        log(f"‚ùå [handle_card_confirmation] –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await query.edit_message_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return ConversationHandler.END
    await query.edit_message_text(
        "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n" "–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ! –†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 2-—Ö —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π",
    )
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —Ç.–∫. edit_message_text
    # –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await query.message.reply_text(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_main_menu(),
    )
    admin_text = (
        f"üì• –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–ª–∞—Ç—É:\n\n"
        f"üë§ {name}\n"
        f"üì± {phone}\n"
        f"üè¶ {bank}\n"
        f"üí∞ –°—É–º–º–∞: {amount} ‚ÇΩ\n"
        f"üí≥ –ú–µ—Ç–æ–¥: {method}\n"
        f"üìÇ –¢–∏–ø: {payout_type}"
    )
    admin_buttons = InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("‚úÖ –†–∞–∑—Ä–µ—à–∏—Ç—å", callback_data=f"allow_payout_{user_id}")],
            [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"deny_payout_{user_id}")],
        ]
    )
    try:
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID, text=admin_text, reply_markup=admin_buttons
        )
    except Exception as e:
        log(f"‚ùå [handle_card_confirmation] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return ConversationHandler.END
    if query.data == "cancel_card":
        log(f"DEBUG [handle_card_confirmation] –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω –¥–ª—è {user_id}")
        await query.edit_message_text("‚ùå –í—ã–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        context.user_data.pop("payout_data", None)
        return ConversationHandler.END
    log(f"DEBUG [handle_card_confirmation] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è {user_id}")
    context.user_data.pop("payout_data", None)
    return ConversationHandler.END


async def confirm_payout_user(update: Update,
                              context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.callback_query:
        query = update.callback_query
        user_id = str(query.from_user.id)
        message = query.message
        await query.answer()
    else:
        user_id = str(update.effective_user.id)
        message = update.message
    log(f"DEBUG [confirm_payout_user] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è user_id: {user_id}")
    payout_data = context.user_data.get("payout_data", {})
    amount = payout_data.get("amount")
    payout_type = payout_data.get("payout_type")
    payout_method = payout_data.get("method")
    if not all([amount, payout_type, payout_method]):
        log(
            f"‚ùå [confirm_payout_user] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {
                amount=}, {
                payout_type=}, {
                payout_method=}")
        await message.reply_text(
            "‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ–ø–æ–ª–Ω—ã–π, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.",
            reply_markup=get_main_menu(),
        )
        context.user_data.clear()
        return ConversationHandler.END
    users = load_users()
    user = users.get(user_id)
    if not user:
        log(f"‚ùå [confirm_payout_user] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await message.reply_text(
            "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            reply_markup=get_main_menu(),
        )
        context.user_data.clear()
        return ConversationHandler.END
    name = user.get("name")
    phone = user.get("phone", "–ù–µ —É–∫–∞–∑–∞–Ω")
    bank = user.get("bank")
    admin_notification = (
        f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–ª–∞—Ç—É:\n"
        f"–¢–∏–ø –≤—ã–ø–ª–∞—Ç—ã: {payout_type}\n"
        f"–°—É–º–º–∞: {amount} ‚ÇΩ\n"
        f"–°–ø–æ—Å–æ–± –≤—ã–ø–ª–∞—Ç—ã: {'–ü–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –∫–∞—Ä—Ç—É' if payout_method == 'üí≥ –ù–∞ –∫–∞—Ä—Ç—É' else payout_method}\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {name}\n"
    )
    keyboard = InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("‚úÖ –†–∞–∑—Ä–µ—à–∏—Ç—å", callback_data=f"allow_payout_{user_id}")],
            [InlineKeyboardButton("‚ùå –ó–∞–ø—Ä–µ—Ç–∏—Ç—å", callback_data=f"deny_payout_{user_id}")],
        ]
    )
    try:
        log(f"DEBUG [confirm_payout_user] –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è {user_id}")
        log_new_request(
            user_id, name, phone, bank, amount, payout_method, payout_type
        )
    except Exception as e:
        log(f"‚ùå [confirm_payout_user] –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return ConversationHandler.END
    try:
        log(f"DEBUG [confirm_payout_user] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=admin_notification,
            reply_markup=keyboard,
        )
    except Exception as e:
        log(
            f"‚ùå [confirm_payout_user] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
        await message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return ConversationHandler.END
    log(
        f"DEBUG [confirm_payout_user] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    await message.reply_text(
        f"‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ ({amount} ‚ÇΩ, {payout_method}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.",
        reply_markup=get_main_menu(),
    )
    log(
        f"‚úÖ [confirm_payout_user] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–ª–∞—Ç—É {amount} ‚ÇΩ"
    )
    context.user_data.pop("payout_data", None)
    return ConversationHandler.END


async def change_payout_amount(update: Update,
                               context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.callback_query.answer()
    await update.callback_query.message.reply_text(
        "üí∏ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –≤—ã–ø–ª–∞—Ç—ã:"
    )
    context.user_data["payout_data"].pop("amount", None)
    context.user_data["awaiting_amount"] = True
    return PayoutStates.ENTER_AMOUNT


async def change_payout_type(update: Update,
                             context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.callback_query.answer()
    keyboard = ReplyKeyboardMarkup(
        [["–ê–≤–∞–Ω—Å", "–ó–∞—Ä–ø–ª–∞—Ç–∞"], ["üè† –î–æ–º–æ–π"]], resize_keyboard=True
    )
    await update.callback_query.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤—ã–ø–ª–∞—Ç—ã:", reply_markup=keyboard
    )
    context.user_data["payout_data"].pop("payout_type", None)
    return PayoutStates.SELECT_TYPE


async def change_payout_method(update: Update,
                               context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.callback_query.answer()
    keyboard = ReplyKeyboardMarkup(
        [["üè¶ –ò–∑ –∫–∞—Å—Å—ã", "üí≥ –ù–∞ –∫–∞—Ä—Ç—É", "ü§ù –ù–∞–ª–∏—á–Ω—ã–º–∏"], ["üè† –î–æ–º–æ–π"]], resize_keyboard=True
    )
    await update.callback_query.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã:", reply_markup=keyboard
    )
    return PayoutStates.SELECT_METHOD
