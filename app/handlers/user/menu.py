import os
import pandas as pd
from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler

from ...config import EXCEL_FILE
from ...services.users import load_users_map
from ...keyboards.reply_user import get_month_keyboard_user, get_main_menu
from ...utils.image import create_schedule_image, create_combined_table_image
from ...services.excel import load_data
from ...services.report import generate_employee_report
from ...utils.logger import log


async def view_salary_user(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –º–µ—Å—è—Ü –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã."""
    chat_id = update.effective_chat.id
    state = context.application.chat_data.get(chat_id, {}).get("conversation")
    log(f"[FSM] state before entry: {state}")
    context.user_data["requested_data"] = "salary"
    if update.message:
        await update.message.reply_text(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ó–ü:",
            reply_markup=get_month_keyboard_user(),
        )
    return ConversationHandler.END


async def view_schedule_user(update: Update,
                             context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –º–µ—Å—è—Ü –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""
    chat_id = update.effective_chat.id
    state = context.application.chat_data.get(chat_id, {}).get("conversation")
    log(f"[FSM] state before entry: {state}")
    context.user_data["requested_data"] = "schedule"
    if update.message:
        await update.message.reply_text(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:",
            reply_markup=get_month_keyboard_user(),
        )
    return ConversationHandler.END


async def handle_selected_month_user(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–µ—Å—è—Ü–∞ –¥–ª—è –ó–ü –∏–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""
    if not update.message:
        return
    month = update.message.text.strip().upper()
    user_id = str(update.effective_user.id)
    valid_months = [
        "–Ø–ù–í–ê–†–¨",
        "–§–ï–í–†–ê–õ–¨",
        "–ú–ê–†–¢",
        "–ê–ü–†–ï–õ–¨",
        "–ú–ê–ô",
        "–ò–Æ–ù–¨",
        "–ò–Æ–õ–¨",
        "–ê–í–ì–£–°–¢",
        "–°–ï–ù–¢–Ø–ë–†–¨",
        "–û–ö–¢–Ø–ë–†–¨",
        "–ù–û–Ø–ë–†–¨",
        "–î–ï–ö–ê–ë–†–¨",
    ]
    log(
        f"üìå [handle_selected_month_user] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –º–µ—Å—è—Ü: {month}")
    if month not in valid_months:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Å—è—Ü. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.",
            reply_markup=get_main_menu(),
        )
        return

    loading_message = await update.message.reply_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ...")
    await context.bot.send_chat_action(chat_id=update.message.chat_id, action="typing")

    users = load_users_map()
    user = users.get(user_id)
    if not user:
        await loading_message.edit_text(
            "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_main_menu(),
        )
        return
    user_name = user.get("name", "").strip()
    user_name_lower = user_name.lower()

    requested_data = context.user_data.get("requested_data", "")
    if requested_data == "salary":
        try:
            data = load_data(sheet_name=month)
            if data is None or "–ò–ú–Ø" not in data.columns:
                log(
                    f"‚ùå [handle_selected_month_user] –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {month}")
                await loading_message.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {month}.",
                    reply_markup=get_main_menu(),
                )
                return
        except Exception as e:
            log(f"‚ùå [handle_selected_month_user] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Excel: {e}")
            await loading_message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {month}: {e}",
                reply_markup=get_main_menu(),
            )
            return

        data["–ò–ú–Ø"] = data["–ò–ú–Ø"].astype(str).str.strip().str.lower()
        employee_data = data[data["–ò–ú–Ø"] == user_name_lower]
        if employee_data.empty:
            await loading_message.edit_text(
                f"‚ùå –î–∞–Ω–Ω—ã–µ –∑–∞ {month} –¥–ª—è {user_name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é.",
                reply_markup=get_main_menu(),
            )
            return

        row_index = employee_data.index[0]
        report_tables = generate_employee_report(
            user_name, month, data, row_index)
        filename = create_combined_table_image(
            report_tables, f"salary_report_{user_id}.png")
        if filename and os.path.exists(filename):
            try:
                await loading_message.delete()
            except Exception as e:
                log(
                    f"‚ö†Ô∏è [handle_selected_month_user] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            with open(filename, "rb") as photo:
                await update.message.reply_photo(
                    photo=photo,
                    caption="–í–∞—à –æ—Ç—á–µ—Ç –æ –∑–∞—Ä–ø–ª–∞—Ç–µ",
                    reply_markup=get_main_menu(),
                )
        else:
            await loading_message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞.",
                reply_markup=get_main_menu(),
            )
    elif requested_data == "schedule":
        try:
            raw_data = pd.read_excel(EXCEL_FILE, sheet_name=month, header=None)
            if raw_data.shape[0] < 2 or raw_data.shape[1] < 3:
                await loading_message.edit_text(
                    f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Excel –¥–ª—è {month}.",
                    reply_markup=get_main_menu(),
                )
                return
        except Exception as e:
            log(f"‚ùå [handle_selected_month_user] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Excel: {e}")
            await loading_message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {month}: {e}",
                reply_markup=get_main_menu(),
            )
            return
        first_row = raw_data.iloc[0].tolist()
        weekdays_row = raw_data.iloc[1].tolist()
        raw_data.columns = first_row[:2] + [str(val) for val in first_row[2:]]
        raw_data = raw_data.drop([0, 1]).reset_index(drop=True)
        raw_data["–ò–ú–Ø"] = raw_data["–ò–ú–Ø"].astype(str).str.strip().str.lower()
        employee_data = raw_data[raw_data["–ò–ú–Ø"] == user_name_lower]
        if employee_data.empty:
            await loading_message.edit_text(
                f"‚ùå –î–∞–Ω–Ω—ã–µ –∑–∞ {month} –¥–ª—è {user_name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é.",
                reply_markup=get_main_menu(),
            )
            return
        filename = create_schedule_image(
            raw_data, user_name, month, weekdays_row[2:33])
        if filename and os.path.exists(filename):
            try:
                await loading_message.delete()
            except Exception as e:
                log(
                    f"‚ö†Ô∏è [handle_selected_month_user] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            with open(filename, "rb") as photo:
                await update.message.reply_photo(
                    photo=photo,
                    caption="–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
                    reply_markup=get_main_menu(),
                )
        else:
            await loading_message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.",
                reply_markup=get_main_menu(),
            )
    else:
        await loading_message.edit_text(
            "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            reply_markup=get_main_menu(),
        )


async def handle_schedule_request(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü."""
    user_id = update.effective_user.id
    users = load_users_map()
    user_info = users.get(str(user_id))
    if not user_info or not user_info.get("name"):
        await update.message.reply_text(
            "‚ùå –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        return
    original_employee_name = user_info["name"]
    month = context.user_data.get("selected_month", "–Ø–ù–í–ê–†–¨")
    log(
        f"üìå [handle_schedule_request] –ó–∞–ø—Ä–æ—Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è '{original_employee_name}' –∑–∞ {month}, user_id: {user_id}"
    )
    loading_message = await update.message.reply_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")
    await context.bot.send_chat_action(chat_id=update.message.chat_id, action="typing")
    try:
        data = pd.read_excel(EXCEL_FILE, sheet_name=month, header=None)
        if data.shape[0] < 2 or data.shape[1] < 3:
            await loading_message.edit_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Excel.")
            return
    except Exception as e:
        log(
            f"‚ùå [handle_schedule_request] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {month}: {e}")
        await loading_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return
    first_row = data.iloc[0].tolist()
    weekdays_row = data.iloc[1].tolist()
    new_columns = first_row[:2] + [str(val) for val in first_row[2:]]
    data.columns = new_columns
    data = data.drop([0, 1]).reset_index(drop=True)
    data["–ò–ú–Ø"] = data["–ò–ú–Ø"].astype(str).str.strip().str.lower()
    compare_name = original_employee_name.strip().lower()
    employee_data = data[data["–ò–ú–Ø"] == compare_name]
    if employee_data.empty:
        await loading_message.edit_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–º–µ–Ω–∏.")
        return
    filename = create_schedule_image(
        data, original_employee_name, month, weekdays_row[2:33])
    if not filename or not os.path.exists(filename):
        await loading_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")
        return
    try:
        with open(filename, "rb") as photo:
            await update.message.reply_photo(photo=photo)
        await loading_message.delete()
    except Exception as e:
        log(f"‚ùå [handle_schedule_request] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await loading_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
