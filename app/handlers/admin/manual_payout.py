"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä—É—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–ø–ª–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.ext import ContextTypes, ConversationHandler
from telegram.error import BadRequest

from ...services.users import load_users
from ...keyboards.reply_admin import get_admin_menu
from ...services.advance_requests import log_new_request
from ...constants import ManualPayoutStates
from ...utils.logger import log


async def manual_payout_start(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    users = load_users()
    employee_names = sorted(
        {u.get("name") for u in users.values() if u.get("name")}
    )
    keyboard = [[name] for name in employee_names] + [["üè† –î–æ–º–æ–π"]]
    context.user_data["manual_users"] = {
        v["name"]: uid for uid, v in users.items() if "name" in v
    }
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
    )
    return ManualPayoutStates.SELECT_EMPLOYEE


async def manual_payout_employee(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    name = update.message.text
    user_map = context.user_data.get("manual_users", {})
    if name not in user_map:
        await update.message.reply_text(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return ManualPayoutStates.SELECT_EMPLOYEE
    context.user_data["manual_payout"] = {
        "name": name,
        "user_id": user_map[name],
    }
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤—ã–ø–ª–∞—Ç—ã:",
        reply_markup=ReplyKeyboardMarkup(
            [["–ê–≤–∞–Ω—Å", "–ó–∞—Ä–ø–ª–∞—Ç–∞"], ["üè† –î–æ–º–æ–π"]], resize_keyboard=True
        ),
    )
    return ManualPayoutStates.SELECT_TYPE


async def manual_payout_type(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    payout_type = update.message.text
    context.user_data["manual_payout"]["payout_type"] = payout_type
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–ø–ª–∞—Ç—ã:")
    return ManualPayoutStates.ENTER_AMOUNT


async def manual_payout_amount(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    text = update.message.text.strip()
    if not text.isdigit():
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
        return ManualPayoutStates.ENTER_AMOUNT
    context.user_data["manual_payout"]["amount"] = int(text)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±:",
        reply_markup=ReplyKeyboardMarkup(
            [["üí≥ –ù–∞ –∫–∞—Ä—Ç—É", "üè¶ –ò–∑ –∫–∞—Å—Å—ã", "ü§ù –ù–∞–ª–∏—á–Ω—ã–º–∏"], ["üè† –î–æ–º–æ–π"]],
            resize_keyboard=True,
        ),
    )
    return ManualPayoutStates.SELECT_METHOD


async def manual_payout_method(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    method = update.message.text
    context.user_data["manual_payout"]["method"] = method
    data = context.user_data["manual_payout"]
    users = load_users()
    user = users.get(data["user_id"], {})
    data["phone"] = user.get("phone", "‚Äî")
    data["bank"] = user.get("bank", "‚Äî")

    msg = (
        f"üì§ –°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å –æ—Ç –∏–º–µ–Ω–∏:\n" f"üë§ {
            data['name']}\nüì± {
            data['phone']}\nüè¶ {
                data['bank']}\n\n" f"–¢–∏–ø: {
                    data['payout_type']}\n–°—É–º–º–∞: {
                        data['amount']} ‚ÇΩ\n–ú–µ—Ç–æ–¥: {
                            data['method']}")
    keyboard = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton(
                    "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="manual_confirm"
                )
            ],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="manual_cancel")],
        ]
    )
    await update.message.reply_text(msg, reply_markup=keyboard)
    return ManualPayoutStates.CONFIRM


async def manual_payout_finalize(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    query = update.callback_query
    await query.answer()
    if query.data == "manual_cancel":
        log(
            f"[Telegram] editing message {query.message.message_id} in {query.message.chat.id}"
        )
        try:
            await query.edit_message_text("‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω.")
        except BadRequest as e:
            log(
                f"‚ùå Failed to edit message {query.message.message_id} in chat {query.message.chat.id} ‚Äî {e}"
            )
            raise
        log(
            f"[Telegram] sending return-to-menu to {query.message.chat.id}"
        )
        try:
            await query.bot.send_message(
                chat_id=query.message.chat.id,
                text="üè† –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                reply_markup=get_admin_menu(),
            )
        except BadRequest as e:
            log(f"‚ùå Failed to send message to chat {query.message.chat.id} ‚Äî {e}")
            raise
        context.user_data.clear()
        return ConversationHandler.END

    data = context.user_data.get("manual_payout", {})
    log_new_request(
        data["user_id"],
        data["name"],
        data["phone"],
        data["bank"],
        data["amount"],
        data["method"],
        data["payout_type"],
    )
    log(
        f"[Telegram] editing message {query.message.message_id} in {query.message.chat.id}"
    )
    try:
        await query.edit_message_text("‚úÖ –ó–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
    except BadRequest as e:
        log(
            f"‚ùå Failed to edit message {query.message.message_id} in chat {query.message.chat.id} ‚Äî {e}"
        )
        raise
    log(
        f"[Telegram] sending return-to-menu to {query.message.chat.id}"
    )
    try:
        await query.bot.send_message(
            chat_id=query.message.chat.id,
            text="üè† –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=get_admin_menu(),
        )
    except BadRequest as e:
        log(f"‚ùå Failed to send message to chat {query.message.chat.id} ‚Äî {e}")
        raise
    context.user_data.clear()
    return ConversationHandler.END
