# -*- coding: utf-8 -*-
"""Handlers for viewing payouts in admin mode."""

import datetime
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler

from ...constants import UserStates
from ...core.constants import MONTHS_RU, PAYOUT_TYPES
from ...config import ADMIN_ID
from ...keyboards.reply_admin import get_admin_menu
from ...services.advance_requests import load_advance_requests

__all__ = [
    "view_payouts",
    "select_payout_type",
    "select_period",
    "select_status",
    "select_employee_filter",
    "select_sort",
    "handle_pagination",
    "cancel_payouts",
    "show_employee_keyboard",
    "show_payouts_page",
]


async def view_payouts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—ã–ø–ª–∞—Ç."""
    if update.effective_user.id != ADMIN_ID:
        return ConversationHandler.END

    keyboard = [
        PAYOUT_TYPES,
        ["–í—Å–µ —Ç–∏–ø—ã"],
        ["üè† –î–æ–º–æ–π"],
    ]
    reply_markup = ReplyKeyboardMarkup(
        keyboard, resize_keyboard=True, one_time_keyboard=True
    )
    await update.message.reply_text(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤—ã–ø–ª–∞—Ç—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:", reply_markup=reply_markup
    )
    return UserStates.SELECT_PAYOUT_TYPE


async def select_payout_type(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    payout_type = update.message.text.strip()
    if payout_type == "üè† –î–æ–º–æ–π":
        await update.message.reply_text(
            "üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=get_admin_menu(),
        )
        return ConversationHandler.END

    if payout_type not in PAYOUT_TYPES + ["–í—Å–µ —Ç–∏–ø—ã"]:
        await update.message.reply_text(
            "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö."
        )
        return UserStates.SELECT_PAYOUT_TYPE

    context.user_data["payout_type_filter"] = (
        payout_type if payout_type != "–í—Å–µ —Ç–∏–ø—ã" else None
    )

    keyboard = [[month]
                for month in MONTHS_RU] + [["–í—Å–µ –ø–µ—Ä–∏–æ–¥—ã"], ["üè† –î–æ–º–æ–π"]]
    reply_markup = ReplyKeyboardMarkup(
        keyboard, resize_keyboard=True, one_time_keyboard=True
    )
    await update.message.reply_text(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ (–º–µ—Å—è—Ü) –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:", reply_markup=reply_markup
    )
    return UserStates.SELECT_PERIOD


async def select_period(update: Update, context: ContextTypes.DEFAULT_TYPE):
    period = update.message.text.strip()
    if period == "üè† –î–æ–º–æ–π":
        await update.message.reply_text(
            "üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=get_admin_menu(),
        )
        return ConversationHandler.END

    months = {name: f"{i:02d}" for i, name in enumerate(MONTHS_RU, start=1)}
    if period not in months and period != "–í—Å–µ –ø–µ—Ä–∏–æ–¥—ã":
        await update.message.reply_text(
            "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–µ—Å—è—Ü –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö."
        )
        return UserStates.SELECT_PERIOD

    current_year = datetime.datetime.now().year
    period_filter = (
        f"{current_year}-{months[period]}" if period != "–í—Å–µ –ø–µ—Ä–∏–æ–¥—ã" else None
    )
    context.user_data["period_filter"] = period_filter

    keyboard = [
        ["–û–∂–∏–¥–∞–µ—Ç", "–û–¥–æ–±—Ä–µ–Ω–æ"],
        ["–û—Ç–∫–ª–æ–Ω–µ–Ω–æ", "–û—Ç–º–µ–Ω–µ–Ω–æ"],
        ["–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã"],
        ["üè† –î–æ–º–æ–π"],
    ]
    reply_markup = ReplyKeyboardMarkup(
        keyboard, resize_keyboard=True, one_time_keyboard=True
    )
    await update.message.reply_text(
        "üîç –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –≤—ã–ø–ª–∞—Ç –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:", reply_markup=reply_markup
    )
    return UserStates.SELECT_STATUS


async def select_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    status = update.message.text.strip()
    if status == "üè† –î–æ–º–æ–π":
        await update.message.reply_text(
            "üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=get_admin_menu(),
        )
        return ConversationHandler.END

    status_map = {
        "–û–∂–∏–¥–∞–µ—Ç": "–û–∂–∏–¥–∞–µ—Ç",
        "–û–¥–æ–±—Ä–µ–Ω–æ": "–û–¥–æ–±—Ä–µ–Ω–æ",
        "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ": "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ",
        "–û—Ç–º–µ–Ω–µ–Ω–æ": "–û—Ç–º–µ–Ω–µ–Ω–æ",
    }
    if status not in status_map and status != "–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã":
        await update.message.reply_text(
            "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö."
        )
        return UserStates.SELECT_STATUS

    context.user_data["status_filter"] = (
        status_map[status] if status != "–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã" else None
    )
    return await show_employee_keyboard(update, context)


async def show_employee_keyboard(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    from ...services.users import load_users

    users = load_users()
    employees = sorted(
        {u.get("name", "").strip() for u in users.values() if u.get("name")}
    )
    if not employees:
        await update.message.reply_text("‚ùå –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø—É—Å—Ç.")
        return UserStates.SELECT_EMPLOYEE_FILTER

    keyboard = [[emp] for emp in employees] + [["–í—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏"]]
    reply_markup = ReplyKeyboardMarkup(
        keyboard, resize_keyboard=True, one_time_keyboard=True
    )
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:", reply_markup=reply_markup
    )
    return UserStates.SELECT_EMPLOYEE_FILTER


async def select_employee_filter(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    from ...services.users import load_users

    users = load_users()
    employees = {
        u.get("name", "").strip() for u in users.values() if u.get("name")
    }

    selected = update.message.text.strip()
    if selected not in employees and selected != "–í—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏":
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–º—è –∏–∑ —Å–ø–∏—Å–∫–∞."
        )
        return UserStates.SELECT_EMPLOYEE_FILTER

    context.user_data["employee_filter"] = selected
    context.user_data["page"] = 0

    keyboard = [
        ["–ü–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)", "–ü–æ –¥–∞—Ç–µ (—Å—Ç–∞—Ä—ã–µ —Å–≤–µ—Ä—Ö—É)"],
        ["–ü–æ —Å—É–º–º–µ (—É–±—ã–≤–∞–Ω–∏–µ)", "–ü–æ —Å—É–º–º–µ (–≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏–µ)"],
        ["üè† –î–æ–º–æ–π"],
    ]
    reply_markup = ReplyKeyboardMarkup(
        keyboard, resize_keyboard=True, one_time_keyboard=True
    )
    await update.message.reply_text(
        "üìà –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –≤—ã–ø–ª–∞—Ç:", reply_markup=reply_markup
    )
    return UserStates.SELECT_SORT


async def select_sort(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sort_option = update.message.text.strip()
    if sort_option == "üè† –î–æ–º–æ–π":
        await update.message.reply_text(
            "üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=get_admin_menu(),
        )
        return ConversationHandler.END

    sort_map = {
        "–ü–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)": ("timestamp", True),
        "–ü–æ –¥–∞—Ç–µ (—Å—Ç–∞—Ä—ã–µ —Å–≤–µ—Ä—Ö—É)": ("timestamp", False),
        "–ü–æ —Å—É–º–º–µ (—É–±—ã–≤–∞–Ω–∏–µ)": ("amount", True),
        "–ü–æ —Å—É–º–º–µ (–≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏–µ)": ("amount", False),
    }
    if sort_option not in sort_map:
        await update.message.reply_text(
            "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏."
        )
        return UserStates.SELECT_SORT

    sort_key, reverse = sort_map[sort_option]
    context.user_data["sort_key"] = sort_key
    context.user_data["sort_reverse"] = reverse

    requests = load_advance_requests()
    payout_type_filter = context.user_data.get("payout_type_filter")
    period_filter = context.user_data.get("period_filter")
    status_filter = context.user_data.get("status_filter")

    filtered_requests = [
        req
        for req in requests
        if (
            payout_type_filter is None
            or req.get("payout_type") == payout_type_filter
        )
        and (
            period_filter is None or req["timestamp"].startswith(period_filter)
        )
        and (status_filter is None or req.get("status") == status_filter)
    ]

    if not filtered_requests:
        await update.message.reply_text(
            "üìä –ù–µ—Ç –≤—ã–ø–ª–∞—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.",
            reply_markup=get_admin_menu(),
        )
        return ConversationHandler.END

    filtered_requests.sort(
        key=lambda x: x.get(sort_key, 0 if sort_key == "amount" else ""),
        reverse=reverse,
    )
    context.user_data["filtered_requests"] = filtered_requests
    context.user_data["page"] = 0
    return await show_payouts_page(update, context)


async def show_payouts_page(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    filtered_requests = context.user_data.get("filtered_requests", [])
    employee_filter = context.user_data.get("employee_filter")
    if employee_filter and employee_filter != "–í—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏":
        filtered_requests = [
            req
            for req in filtered_requests
            if req.get("name") == employee_filter
        ]

    if not filtered_requests:
        await update.message.reply_text(
            "üì≠ –ù–µ—Ç –≤—ã–ø–ª–∞—Ç –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.",
            reply_markup=get_admin_menu(),
        )
        return ConversationHandler.END

    items_per_page = 5
    total_pages = (
        len(filtered_requests) + items_per_page - 1
    ) // items_per_page
    page = max(0, min(context.user_data.get("page", 0), total_pages - 1))
    context.user_data["page"] = page

    start_idx = page * items_per_page
    end_idx = min(start_idx + items_per_page, len(filtered_requests))
    page_requests = filtered_requests[start_idx:end_idx]

    from ...services.users import load_users

    users = load_users()

    lines = []
    for req in page_requests:
        uid = req.get("user_id", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        uname = users.get(uid, {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        lines.append(
            "\n".join(
                [
                    f"üë§ {uname}",
                    f"–¢–∏–ø: {req.get('payout_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}",
                    f"–°—É–º–º–∞: {req.get('amount', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} ‚ÇΩ",
                    f"–ú–µ—Ç–æ–¥: {req.get('method', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}",
                    f"–°—Ç–∞—Ç—É—Å: {req.get('status', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}",
                    f"–î–∞—Ç–∞: {req.get('timestamp', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}",
                ]
            )
        )

    result_text = (
        f"üìä –°–ø–∏—Å–æ–∫ –≤—ã–ø–ª–∞—Ç (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}):\n\n"
        + "\n\n".join(lines)
    )

    keyboard = []
    nav_buttons = []
    if page > 0:
        nav_buttons.append("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    if page < total_pages - 1:
        nav_buttons.append("‚û°Ô∏è –î–∞–ª–µ–µ")
    if nav_buttons:
        keyboard.append(nav_buttons)
    keyboard.append(["üè† –î–æ–º–æ–π"])
    reply_markup = ReplyKeyboardMarkup(
        keyboard, resize_keyboard=True, one_time_keyboard=True
    )
    await update.message.reply_text(result_text, reply_markup=reply_markup)
    return UserStates.SHOW_PAYOUTS


async def handle_pagination(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    action = update.message.text.strip()
    if action == "üè† –î–æ–º–æ–π":
        await update.message.reply_text(
            "üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=get_admin_menu(),
        )
        context.user_data.clear()
        return ConversationHandler.END
    if action == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        context.user_data["page"] = max(
            0, context.user_data.get("page", 0) - 1
        )
    elif action == "‚û°Ô∏è –î–∞–ª–µ–µ":
        context.user_data["page"] = context.user_data.get("page", 0) + 1
    else:
        await update.message.reply_text(
            "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö."
        )
        return UserStates.SHOW_PAYOUTS
    return await show_payouts_page(update, context)


async def cancel_payouts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=get_admin_menu()
    )
    context.user_data.clear()
    return ConversationHandler.END
