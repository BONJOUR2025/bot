import os
import pandas as pd
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from ...constants import UserStates
from ...config import EXCEL_FILE
from ...services.users import load_users_map
from ...keyboards.reply_admin import get_admin_menu, get_month_keyboard, get_home_button
from ...services.excel import load_data
from ...services.report import generate_employee_report
from ...utils.image import create_combined_table_image, create_schedule_image
from ...utils.logger import log


async def view_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    state = context.application.chat_data.get(chat_id, {}).get("conversation")
    log(f"[FSM] state before entry: {state}")
    keyboard = [["üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "üí∞ –ó–∞—Ä–ø–ª–∞—Ç—ã"], ["üè† –î–æ–º–æ–π"]]
    reply_markup = ReplyKeyboardMarkup(
        keyboard, resize_keyboard=True, one_time_keyboard=False
    )
    await update.message.reply_text(
        "üìä –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?", reply_markup=reply_markup
    )
    context.user_data["viewing_data"] = True
    return UserStates.SELECT_DATA_TYPE


async def select_month(update: Update, context: ContextTypes.DEFAULT_TYPE):
    month = update.message.text
    log(f"üöÄ [select_month] –í—ã–±—Ä–∞–Ω –º–µ—Å—è—Ü: {month}")
    context.user_data["selected_month"] = month
    employees = get_employee_list(EXCEL_FILE, month)
    if not employees:
        await update.message.reply_text(
            f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ {month}.", reply_markup=get_admin_menu()
        )
        return UserStates.SELECT_DATA_TYPE
    await update.message.reply_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è {month}:",
        reply_markup=get_employees_keyboard(employees),
    )
    context.user_data["awaiting_employee"] = True
    return UserStates.SELECT_EMPLOYEE


async def select_data_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    log("üì• [select_data_type] –§—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–Ω–∞")
    data_type = update.message.text
    log(f"üöÄ [select_data_type] –í—ã–±—Ä–∞–Ω–æ: '{data_type}'")

    if data_type == "üí∞ –ó–∞—Ä–ø–ª–∞—Ç—ã":
        context.user_data["data_type"] = "salary"
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", reply_markup=get_month_keyboard()
        )
        return UserStates.SELECT_MONTH
    elif data_type == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        context.user_data["data_type"] = "schedule"
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", reply_markup=get_month_keyboard()
        )
        return UserStates.SELECT_MONTH
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=get_admin_menu(),
        )
        return UserStates.SELECT_DATA_TYPE


async def select_employee(update: Update, context: ContextTypes.DEFAULT_TYPE):
    employee_name = update.message.text
    month = context.user_data.get("selected_month")
    data_type = context.user_data.get("data_type")
    log(
        f"DEBUG [select_employee] –í—ã–±—Ä–∞–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫: '{employee_name}', –º–µ—Å—è—Ü: {month}, data_type: '{data_type}'"
    )
    context.user_data["selected_employee"] = employee_name
    context.user_data["awaiting_employee"] = False
    if data_type == "salary":
        await handle_salary_admin(update, context)
    elif data_type == "schedule":
        await handle_schedule_admin(update, context)
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö.", reply_markup=get_admin_menu()
        )
    return UserStates.SELECT_DATA_TYPE


async def handle_salary_admin(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE):
    month = context.user_data.get("selected_month")
    employee_name = context.user_data.get("selected_employee")
    if not month or not employee_name:
        await update.message.reply_text(
            "‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω—ã –º–µ—Å—è—Ü –∏–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫.", reply_markup=get_admin_menu()
        )
        return
    employee_name = update.message.text.strip()
    user_id = str(update.effective_user.id)
    log(
        f"üìå [handle_salary_admin] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∑–∞—Ä–ø–ª–∞—Ç—É –¥–ª—è '{employee_name}' –∑–∞ {month}"
    )
    loading_message = await update.message.reply_text(
        "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –æ –∑–∞—Ä–ø–ª–∞—Ç–µ..."
    )
    await context.bot.send_chat_action(
        chat_id=update.message.chat_id, action="typing"
    )
    try:
        data = load_data(sheet_name=month)
        if data is None:
            log(f"‚ùå [handle_salary_admin] –î–∞–Ω–Ω—ã–µ –¥–ª—è {month} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            await loading_message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞ {month} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
            )
            return
        if "–ò–ú–Ø" not in data.columns:
            log(
                f"‚ùå [handle_salary_admin] –°—Ç–æ–ª–±–µ—Ü '–ò–ú–Ø' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞ {month}")
            await loading_message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {month}."
            )
            return
        log(f"‚úÖ [handle_salary_admin] –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {list(data.columns)}")
    except Exception as e:
        log(f"‚ùå [handle_salary_admin] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        await loading_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return
    data["–ò–ú–Ø"] = data["–ò–ú–Ø"].astype(str).str.strip()
    employee_data = data[data["–ò–ú–Ø"] == employee_name]
    if employee_data.empty:
        log(
            f"‚ùå [handle_salary_admin] –°–æ—Ç—Ä—É–¥–Ω–∏–∫ '{employee_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞ {month}"
        )
        await loading_message.edit_text(
            f"‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ {employee_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –∑–∞ {month}."
        )
        return
    row_index = employee_data.index[0]
    log(
        f"‚úÖ [handle_salary_admin] –ù–∞–π–¥–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ '{employee_name}' –Ω–∞ —Å—Ç—Ä–æ–∫–µ {row_index}"
    )
    try:
        report_tables = generate_employee_report(
            employee_name, month, data, row_index
        )
        if not report_tables:
            log(
                f"‚ùå [handle_salary_admin] –û—Ç—á—ë—Ç –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è {employee_name}")
            await loading_message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞: –æ—Ç—á—ë—Ç –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω."
            )
            return
        log(
            f"‚úÖ [handle_salary_admin] –û—Ç—á—ë—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, —Ç–∞–±–ª–∏—Ü: {len(report_tables)}"
        )
    except Exception as e:
        log(f"‚ùå [handle_salary_admin] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")
        await loading_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")
        return
    filename = create_combined_table_image(
        report_tables, f"salary_report_admin_{user_id}.png"
    )
    if not filename or not os.path.exists(filename):
        log(f"‚ùå [handle_salary_admin] –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω: {filename}")
        await loading_message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞."
        )
        return
    log(f"‚úÖ [handle_salary_admin] –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω: {filename}")
    try:
        with open(filename, "rb") as photo:
            await update.message.reply_photo(photo=photo)
        log(
            f"‚úÖ [handle_salary_admin] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–∞—Ç–µ–ª—é {user_id}")
        try:
            await loading_message.delete()
        except Exception as e:
            log(f"‚ö†Ô∏è [handle_salary_admin] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text(
            "üè† –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", reply_markup=get_admin_menu()
        )
        return ConversationHandler.END
    except Exception as e:
        log(f"‚ùå [handle_salary_admin] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await loading_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–∞: {e}")


async def handle_schedule_admin(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    employee_name = context.user_data.get("selected_employee")
    month = context.user_data.get("selected_month")
    if not employee_name or not month:
        await update.message.reply_text(
            "‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –∏–ª–∏ –º–µ—Å—è—Ü.", reply_markup=get_admin_menu()
        )
        return UserStates.SELECT_DATA_TYPE
    loading_message = await update.message.reply_text(
        "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ..."
    )
    await context.bot.send_chat_action(
        chat_id=update.message.chat_id, action="typing"
    )
    try:
        data = pd.read_excel(EXCEL_FILE, sheet_name=month, header=None)
        if data.shape[0] < 2 or data.shape[1] < 3:
            log(
                f"‚ùå [handle_schedule_admin] –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {month}: {data.shape}"
            )
            await loading_message.edit_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Excel."
            )
            return UserStates.SELECT_DATA_TYPE
        log(
            f"‚úÖ [handle_schedule_admin] –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, —Ä–∞–∑–º–µ—Ä: {data.shape}"
        )
    except Exception as e:
        log(
            f"‚ùå [handle_schedule_admin] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {month}: {e}")
        await loading_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return UserStates.SELECT_DATA_TYPE
    first_row = data.iloc[0].tolist()
    weekdays_row = data.iloc[1].tolist()
    new_columns = first_row[:2] + [str(val) for val in first_row[2:]]
    data.columns = new_columns
    data = data.drop([0, 1]).reset_index(drop=True)
    data["–ò–ú–Ø"] = data["–ò–ú–Ø"].astype(str).str.strip().str.lower()
    compare_name = employee_name.strip().lower()
    log(
        f"DEBUG [handle_schedule_admin] –°—Ç–æ–ª–±—Ü—ã: {data.columns.tolist()}, –ò–º—è –¥–ª—è –ø–æ–∏—Å–∫–∞: '{compare_name}'"
    )
    log(f"DEBUG [handle_schedule_admin] –î–Ω–∏ –Ω–µ–¥–µ–ª–∏: {weekdays_row[2:33]}")
    employee_data = data[data["–ò–ú–Ø"] == compare_name]
    if employee_data.empty:
        log(
            f"‚ùå [handle_schedule_admin] –°–æ—Ç—Ä—É–¥–Ω–∏–∫ '{employee_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞ {month}"
        )
        await loading_message.edit_text(
            "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–º–µ–Ω–∏."
        )
        return
    log(f"‚úÖ [handle_schedule_admin] –°–æ—Ç—Ä—É–¥–Ω–∏–∫ '{employee_name}' –Ω–∞–π–¥–µ–Ω.")
    filename = create_schedule_image(
        data, employee_name, month, weekdays_row[2:33]
    )
    log(
        f"DEBUG [handle_schedule_admin] –†–µ–∑—É–ª—å—Ç–∞—Ç create_schedule_image: {filename}"
    )
    if not filename or not os.path.exists(filename):
        log(
            f"‚ùå [handle_schedule_admin] –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω: {filename}"
        )
        await loading_message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."
        )
        return UserStates.SELECT_DATA_TYPE
    log(f"‚úÖ [handle_schedule_admin] –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω: {filename}")
    try:
        with open(filename, "rb") as photo:
            await update.message.reply_photo(
                photo=photo,
                caption="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ß—Ç–æ –¥–∞–ª—å—à–µ?",
                reply_markup=get_home_button(),
            )
        log(
            f"‚úÖ [handle_schedule_admin] –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        await loading_message.delete()
    except Exception as e:
        log(f"‚ùå [handle_schedule_admin] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await loading_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        return UserStates.SELECT_DATA_TYPE
    return UserStates.SELECT_DATA_TYPE


def get_employee_list(excel_file, sheet_name):
    data = load_data(sheet_name)
    if data is None or "–ò–ú–Ø" not in data.columns:
        return []
    return data["–ò–ú–Ø"].dropna().unique().tolist()


def get_employees_keyboard(employees):
    keyboard = [[emp] for emp in employees] + [["üè† –î–æ–º–æ–π"]]
    return ReplyKeyboardMarkup(
        keyboard, resize_keyboard=True, one_time_keyboard=False
    )
