import datetime
from telegram import (
    Update,
    ReplyKeyboardRemove,
    InputFile,
    ReplyKeyboardMarkup,
)
from telegram.ext import ContextTypes, ConversationHandler

from ...constants import AdvanceReportStates
from ...config import ADMIN_ID
from ...keyboards.reply_admin import get_admin_menu
from ...services.advance_report import (
    generate_advance_report,
    save_markdown_file,
)


async def report_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return ConversationHandler.END
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD:",
        reply_markup=ReplyKeyboardRemove(),
    )
    return AdvanceReportStates.ENTER_START_DATE


async def enter_start_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    try:
        start_date = datetime.datetime.strptime(text, "%Y-%m-%d").date()
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD."
        )
        return AdvanceReportStates.ENTER_START_DATE
    context.user_data["report_start_date"] = start_date
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD:"
    )
    return AdvanceReportStates.ENTER_END_DATE


async def enter_end_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    try:
        end_date = datetime.datetime.strptime(text, "%Y-%m-%d").date()
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD."
        )
        return AdvanceReportStates.ENTER_END_DATE
    start_date = context.user_data.get("report_start_date")
    if not start_date:
        await update.message.reply_text("‚ùå –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞.")
        return ConversationHandler.END
    if end_date < start_date:
        await update.message.reply_text(
            "‚ùå –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥."
        )
        return AdvanceReportStates.ENTER_END_DATE

    context.user_data["report_end_date"] = end_date
    keyboard = [
        ["–û–∂–∏–¥–∞–µ—Ç", "–û–¥–æ–±—Ä–µ–Ω–æ"],
        ["–û—Ç–∫–ª–æ–Ω–µ–Ω–æ", "–û—Ç–º–µ–Ω–µ–Ω–æ"],
        ["–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã"],
    ]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –æ—Ç—á—ë—Ç–∞:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard, resize_keyboard=True, one_time_keyboard=True
        ),
    )
    return AdvanceReportStates.SELECT_STATUS


async def select_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    status = update.message.text.strip()
    valid = {"–û–∂–∏–¥–∞–µ—Ç", "–û–¥–æ–±—Ä–µ–Ω–æ", "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ", "–û—Ç–º–µ–Ω–µ–Ω–æ", "–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã"}
    if status not in valid:
        await update.message.reply_text("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return AdvanceReportStates.SELECT_STATUS

    statuses = None if status == "–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã" else [status]
    start_date = context.user_data.get("report_start_date")
    end_date = context.user_data.get("report_end_date")

    df = generate_advance_report(start_date, end_date, statuses)
    if df.empty:
        await update.message.reply_text(
            "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∞–≤–∞–Ω—Å–∞–º –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.",
            reply_markup=get_admin_menu(),
        )
        return ConversationHandler.END

    filename = save_markdown_file(df)
    with open(filename, "rb") as f:
        await update.message.reply_document(
            document=InputFile(f, filename=filename)
        )

    await update.message.reply_text(
        "üè† –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=get_admin_menu()
    )
    return ConversationHandler.END


# Export under an alias to avoid name conflicts with payout status handler
report_select_status = select_status
