"""–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏."""

import asyncio
from telegram import (
    Message,
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import Application, ContextTypes, ConversationHandler
from telegram.error import BadRequest

from ...utils import is_valid_user_id

from ...config import ADMIN_ID
from ...services.users import load_users_map
from ...utils.logger import log
from ...constants import UserStates
from ...keyboards.reply_admin import get_home_button, get_admin_menu


async def send_message(
    app: Application, user_id: int, message: Message
) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    log(
        f"[Telegram] broadcasting message to {user_id} ‚Äî text: '{(message.text or message.caption or '')[:50]}'"
    )
    if not is_valid_user_id(user_id):
        log(f"‚ö†Ô∏è Skipping message ‚Äî invalid or fake user_id: {user_id}")
        return
    try:
        if message.text:
            await app.bot.send_message(
                chat_id=user_id,
                text=message.text,
                parse_mode="HTML",
            )
        elif message.photo:
            await app.bot.send_photo(
                chat_id=user_id,
                photo=message.photo[-1].file_id,
                caption=message.caption or "",
                parse_mode="HTML",
            )
        log(f"‚úÖ [send_message] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except BadRequest as e:
        log(f"‚ùå Failed to send message to chat {user_id} ‚Äî {e}")
        raise
    except Exception as e:
        log(f"‚ùå [send_message] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


async def send_broadcast_message(
    app: Application, message: Message, user_list: list[int]
) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ —Å–ø–∏—Å–∫–∞."""
    for i, user_id in enumerate(user_list, start=1):
        await send_message(app, user_id, message)
        if i % 15 == 0:
            await asyncio.sleep(1)


async def handle_broadcast_start(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏."""
    chat_id = update.effective_chat.id
    state = context.application.chat_data.get(chat_id, {}).get("conversation")
    log(f"[FSM] state before entry: {state}")
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    if update.message.text != "üì¢ –†–∞—Å—Å—ã–ª–∫–∞":
        return

    log(
        f"üì¢ [handle_broadcast_start] –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏"
    )
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
        reply_markup=get_home_button(),
    )
    context.user_data["broadcast_in_progress"] = True
    return UserStates.BROADCAST_MESSAGE


async def handle_broadcast_message(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ."""
    user_id = update.effective_user.id
    if user_id != ADMIN_ID or not context.user_data.get(
        "broadcast_in_progress"
    ):
        return ConversationHandler.END

    message_text = update.message.text.strip()
    if message_text == "üè† –î–æ–º–æ–π":
        context.user_data.pop("broadcast_in_progress", None)
        await update.message.reply_text(
            "üè† –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_admin_menu()
        )
        return ConversationHandler.END

    log(
        f"üì¢ [handle_broadcast_message] –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç {user_id}: {message_text}"
    )
    context.user_data["broadcast_text"] = message_text

    keyboard = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton(
                    "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="broadcast_confirm"
                )
            ],
            [
                InlineKeyboardButton(
                    "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="broadcast_edit"
                )
            ],
            [
                InlineKeyboardButton(
                    "üè† –û—Ç–º–µ–Ω–∞", callback_data="broadcast_cancel"
                )
            ],
        ]
    )
    await update.message.reply_text(
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n{message_text}",
        reply_markup=keyboard,
    )
    return UserStates.BROADCAST_CONFIRM


async def handle_broadcast_confirm(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω—É —Ä–∞—Å—Å—ã–ª–∫–∏."""
    query = update.callback_query
    await query.answer()

    if query.data == "broadcast_confirm":
        return await handle_broadcast_send(update, context)
    if query.data == "broadcast_edit":
        log(
            f"[Telegram] editing message {query.message.message_id} in {query.message.chat.id}"
        )
        try:
            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
        except BadRequest as e:
            log(
                f"‚ùå Failed to edit message {query.message.message_id} in chat {query.message.chat.id} ‚Äî {e}"
            )
            raise
        return UserStates.BROADCAST_MESSAGE

    context.user_data.pop("broadcast_in_progress", None)
    context.user_data.pop("broadcast_text", None)
    log(
        f"[Telegram] editing message {query.message.message_id} in {query.message.chat.id}"
    )
    try:
        await query.edit_message_text(
            "üè† –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_admin_menu()
        )
    except BadRequest as e:
        log(
            f"‚ùå Failed to edit message {query.message.message_id} in chat {query.message.chat.id} ‚Äî {e}"
        )
        raise
    return ConversationHandler.END


async def handle_broadcast_send(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    user_id = update.effective_user.id
    if user_id != ADMIN_ID or not context.user_data.get(
        "broadcast_in_progress"
    ):
        return ConversationHandler.END

    message_text = context.user_data.get("broadcast_text")
    if not message_text:
        await update.message.reply_text(
            "‚ùå –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_admin_menu()
        )
        return ConversationHandler.END

    log(
        f"üì¢ [handle_broadcast_send] –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç {user_id}: {message_text}"
    )

    users = load_users_map()
    user_ids = [int(uid) for uid in users.keys()]

    message = update.message
    message.text = message_text

    await send_broadcast_message(context.application, message, user_ids)

    context.user_data.pop("broadcast_in_progress", None)
    context.user_data.pop("broadcast_text", None)
    await update.message.reply_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!",
        reply_markup=get_admin_menu(),
    )
    log(
        f"‚úÖ [handle_broadcast_send] –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    )
    return ConversationHandler.END
