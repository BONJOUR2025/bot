# Handler functions for payout approval and rejection.
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
)
from telegram.ext import ContextTypes, ConversationHandler
from telegram.error import BadRequest

from ...constants import UserStates
from ...config import (
    ADMIN_ID,
    ADMIN_CHAT_ID,
    CARD_DISPATCH_CHAT_ID,
)
from ...services.users import load_users
from ...keyboards.reply_admin import get_admin_menu
from ...services.advance_requests import (
    load_advance_requests,
    save_advance_requests,
    update_request_status,
)
from ...utils.logger import log
from ...utils import is_valid_user_id

PENDING_STATUSES = {"–û–∂–∏–¥–∞–µ—Ç", "–í –æ–∂–∏–¥–∞–Ω–∏–∏"}


async def allow_payout(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    user_id = query.data.split("_")[-1]
    log(f"‚úÖ [allow_payout] –û–¥–æ–±—Ä–µ–Ω–∏–µ –≤—ã–ø–ª–∞—Ç—ã –¥–ª—è user_id: {user_id}")

    payout_requests = load_advance_requests()
    request_to_approve = next(
        (
            r
            for r in payout_requests
            if r["user_id"] == user_id and r.get("status") in PENDING_STATUSES
        ),
        None,
    )
    if not request_to_approve:
        await query.edit_message_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è.")
        return

    try:
        update_request_status(user_id, "approved")
        log(
            f"‚úÖ –°—Ç–∞—Ç—É—Å –≤—ã–ø–ª–∞—Ç—ã –¥–ª—è user_id {user_id} –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ –û–¥–æ–±—Ä–µ–Ω–æ"
        )
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–ª–∞—Ç—ã: {e}")

    payout_type = request_to_approve.get("payout_type") or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    user_message = (
        f"‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–ª–∞—Ç—É –æ–¥–æ–±—Ä–µ–Ω!\n"
        f"–¢–∏–ø: {payout_type}\n"
        f"–°—É–º–º–∞: {request_to_approve['amount']} ‚ÇΩ\n"
        f"–ú–µ—Ç–æ–¥: {request_to_approve['method']}"
    )
    log(
        f"[Telegram] sending approval notice to {user_id} ‚Äî text: '{user_message[:50]}'"
    )
    if is_valid_user_id(user_id):
        try:
            await context.bot.send_message(chat_id=user_id, text=user_message)
        except BadRequest as e:
            log(f"‚ùå Failed to send message to chat {user_id} ‚Äî {e}")
            raise
    else:
        log(f"‚ö†Ô∏è Skipping message ‚Äî invalid or fake user_id: {user_id}")

    current_text = query.message.text
    updated_text = f"{current_text}\n\n‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–æ"
    log(
        f"[Telegram] editing message {query.message.message_id} in {query.message.chat.id}"
    )
    try:
        await query.edit_message_text(text=updated_text)
    except BadRequest as e:
        log(
            f"‚ùå Failed to edit message {query.message.message_id} in chat {query.message.chat.id} ‚Äî {e}"
        )
        raise

    if request_to_approve["method"] == "üí≥ –ù–∞ –∫–∞—Ä—Ç—É":
        cashier_text = (
            f"üì§ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥:\n\n"
            f"üë§ {request_to_approve['name']}\n"
            f"üì± {request_to_approve['phone']}\n"
            f"üè¶ {request_to_approve['bank']}\n"
            f"üí∞ {request_to_approve['amount']} ‚ÇΩ\n"
            f"üìÇ {payout_type}"
        )
        cashier_buttons = InlineKeyboardMarkup(
            [[InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", callback_data=f"mark_sent_{user_id}")]]
        )
        log(
            f"[Telegram] sending cashier notice to {CARD_DISPATCH_CHAT_ID} ‚Äî text: '{cashier_text[:50]}'"
        )
        try:
            await context.bot.send_message(
                chat_id=CARD_DISPATCH_CHAT_ID,
                text=cashier_text,
                reply_markup=cashier_buttons,
            )
            log(f"üì® [allow_payout] –°–æ–æ–±—â–µ–Ω–∏–µ –∫–∞—Å—Å–∏—Ä—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è user_id: {user_id}")
        except BadRequest as e:
            log(f"‚ùå Failed to send message to chat {CARD_DISPATCH_CHAT_ID} ‚Äî {e}")
            raise
        except Exception as e:
            log(f"‚ùå [allow_payout] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Å—Å–∏—Ä—É: {e}")


async def deny_payout(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    user_id = query.data.split("_")[-1]
    log(f"‚ùå [deny_payout] –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤—ã–ø–ª–∞—Ç—ã –¥–ª—è user_id: {user_id}")

    payout_requests = load_advance_requests()
    request_to_deny = next(
        (
            r
            for r in payout_requests
            if r["user_id"] == user_id and r.get("status") in PENDING_STATUSES
        ),
        None,
    )
    if not request_to_deny:
        await query.edit_message_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è.")
        return

    try:
        update_request_status(user_id, "rejected")
        log(
            f"‚úÖ –°—Ç–∞—Ç—É—Å –≤—ã–ø–ª–∞—Ç—ã –¥–ª—è user_id {user_id} –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ"
        )
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–ª–∞—Ç—ã: {e}")

    payout_type = request_to_deny.get("payout_type") or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    user_message = (
        f"‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–ª–∞—Ç—É –æ—Ç–∫–ª–æ–Ω—ë–Ω.\n"
        f"–¢–∏–ø: {payout_type}\n"
        f"–°—É–º–º–∞: {request_to_deny['amount']} ‚ÇΩ\n"
        f"–ú–µ—Ç–æ–¥: {request_to_deny['method']}"
    )
    log(
        f"[Telegram] sending denial notice to {user_id} ‚Äî text: '{user_message[:50]}'"
    )
    if is_valid_user_id(user_id):
        try:
            await context.bot.send_message(chat_id=user_id, text=user_message)
        except BadRequest as e:
            log(f"‚ùå Failed to send message to chat {user_id} ‚Äî {e}")
            raise
    else:
        log(f"‚ö†Ô∏è Skipping message ‚Äî invalid or fake user_id: {user_id}")

    current_text = query.message.text
    updated_text = f"{current_text}\n\n‚ùå –û—Ç–∫–∞–∑–∞–Ω–æ"
    log(
        f"[Telegram] editing message {query.message.message_id} in {query.message.chat.id}"
    )
    try:
        await query.edit_message_text(text=updated_text, reply_markup=None)
    except BadRequest as e:
        log(
            f"‚ùå Failed to edit message {query.message.message_id} in chat {query.message.chat.id} ‚Äî {e}"
        )
        raise


async def reset_payout_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    payout_requests = load_advance_requests()
    if not payout_requests:
        await update.message.reply_text(
            "üì≠ –ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Ñ–∞–π–ª–µ –¥–ª—è —Å–±—Ä–æ—Å–∞.",
            reply_markup=get_admin_menu(),
        )
        return

    pending_requests = [
        req
        for req in payout_requests
        if req.get("status") in PENDING_STATUSES
    ]
    reset_details = []

    if pending_requests:
        for req in pending_requests:
            req["status"] = "–û—Ç–º–µ–Ω–µ–Ω–æ"
            update_request_status(req["user_id"], "cancelled")
            reset_details.append(
                f"üë§ {req['name']} (ID: {req['user_id']})\n"
                f"–°—É–º–º–∞: {req['amount']} ‚ÇΩ\n"
                f"–ú–µ—Ç–æ–¥: {req['method']}\n"
                f"–¢–∏–ø: {req.get('payout_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}"
            )
        save_advance_requests(payout_requests)
        log(
            f"‚úÖ [reset_payout_request] –°–±—Ä–æ—à–µ–Ω–æ {len(pending_requests)} –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞: {reset_details}"
        )
    else:
        log("‚ö†Ô∏è [reset_payout_request] –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Ñ–∞–π–ª–µ.")

    users = load_users()
    reset_users = []
    persistence = getattr(context.application, "persistence", None)
    for uid in users.keys():
        user_data = persistence.get_user_data().get(int(uid), {}) if persistence else {}
        if user_data and "payout_in_progress" in user_data:
            reset_users.append(f"üë§ {users[uid].get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} (ID: {uid})")
            user_data.pop("payout_in_progress", None)
            user_data.pop("payout_data", None)
            if persistence:
                persistence.update_user_data(int(uid), user_data)

    message_lines = []
    if pending_requests:
        message_lines.append(f"‚úÖ –°–±—Ä–æ—à–µ–Ω–æ {len(pending_requests)} –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞:")
        message_lines.extend([f"–ó–∞–ø—Ä–æ—Å #{i+1}:\n{detail}" for i, detail in enumerate(reset_details)])
    else:
        message_lines.append("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Ñ–∞–π–ª–µ.")

    if reset_users:
        message_lines.append(f"\n‚úÖ –û—á–∏—â–µ–Ω–æ {len(reset_users)} –∑–∞–≤–∏—Å—à–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π:")
        message_lines.extend([f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{i+1}: {user}" for i, user in enumerate(reset_users)])
    else:
        message_lines.append("\nüì≠ –ù–µ—Ç –∑–∞–≤–∏—Å—à–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    reset_message = "\n\n".join(message_lines)
    await update.message.reply_text(reset_message, reply_markup=get_admin_menu())
    log(f"‚úÖ [reset_payout_request] –ó–∞–≤–µ—Ä—à—ë–Ω —Å–±—Ä–æ—Å: {reset_message}")


async def mark_sent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.data.split("_")[-1]
    current_text = query.message.text
    updated_text = f"{current_text}\n\nüì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
    log(
        f"[Telegram] editing message {query.message.message_id} in {query.message.chat.id}"
    )
    try:
        await query.edit_message_text(updated_text)
    except BadRequest as e:
        log(
            f"‚ùå Failed to edit message {query.message.message_id} in chat {query.message.chat.id} ‚Äî {e}"
        )
        raise
