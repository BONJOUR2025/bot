"""Access payout requests via the REST API instead of local JSON files."""

import time
from dataclasses import asdict
from typing import Any, Dict, List

import requests

from ..utils.logger import log
from ..models import PayoutRequest

# Base URL of the local API
API_URL = "http://localhost:8000/api"

# –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–∞—Ö
STATUS_TRANSLATIONS = {
    "approved": "–û–¥–æ–±—Ä–µ–Ω–æ",
    "rejected": "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ",
    "pending": "–û–∂–∏–¥–∞–µ—Ç",
    "cancelled": "–û—Ç–º–µ–Ω–µ–Ω–æ",
}


def load_advance_requests() -> List[Dict[str, Any]]:
    """Fetch payout requests from the local API."""
    try:
        resp = requests.get(f"{API_URL}/payouts/")
        resp.raise_for_status()
        return resp.json()
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—ã–ø–ª–∞—Ç —á–µ—Ä–µ–∑ API: {e}")
        return []


def save_advance_requests(_requests_list: List[Dict[str, Any]]) -> None:
    """Deprecated helper kept for backward compatibility."""
    log("‚ö†Ô∏è save_advance_requests is deprecated when using the API")


def load_requests_dataclass() -> List[PayoutRequest]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫–∞–∫ –æ–±—ä–µ–∫—Ç—ã PayoutRequest."""
    return [PayoutRequest(**d) for d in load_advance_requests()]


def save_requests_dataclass(requests: List[PayoutRequest]) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ PayoutRequest."""
    save_advance_requests([asdict(r) for r in requests])


def log_new_request(
    user_id: Any,
    name: str,
    phone: str,
    bank: str,
    amount: Any,
    payout_method: str,
    payout_type: str | None = None,
) -> None:
    """Send a new payout request to the API."""
    payload = {
        "user_id": str(user_id),
        "name": name,
        "phone": phone,
        "bank": bank,
        "amount": int(amount),
        "method": payout_method,
        "payout_type": payout_type,
    }
    try:
        requests.post(f"{API_URL}/payouts/", json=payload)
        log(f"üìù –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤—ã–ø–ª–∞—Ç—ã: {payload}")
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –≤—ã–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ API: {e}")


def check_pending_request(user_id: Any) -> bool:
    """Check via API if user has a pending payout request."""
    try:
        resp = requests.get(
            f"{API_URL}/payouts/",
            params={"employee_id": user_id, "status": "–í –æ–∂–∏–¥–∞–Ω–∏–∏"},
        )
        resp.raise_for_status()
        return len(resp.json()) > 0
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤—ã–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ API: {e}")
        return False


def update_request_status(user_id: Any, status: str) -> None:
    """Update the last pending request for a user via the API."""
    try:
        resp = requests.get(
            f"{API_URL}/payouts/",
            params={"employee_id": user_id, "status": "–í –æ–∂–∏–¥–∞–Ω–∏–∏"},
        )
        resp.raise_for_status()
        items = resp.json()
        if not items:
            log(
                f"‚ö†Ô∏è [update_request_status] –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è user_id {user_id}"
            )
            return
        payout_id = items[0]["id"]
        status_ru = STATUS_TRANSLATIONS.get(status.lower(), status)
        requests.put(
            f"{API_URL}/payouts/{payout_id}",
            json={
                "status": status_ru})
        log(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è user_id {user_id} –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ '{status}'")
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ API: {e}")


def delete_request(user_id: Any) -> None:
    """Delete all requests for a user via the API."""
    try:
        resp = requests.get(
            f"{API_URL}/payouts/",
            params={"employee_id": user_id},
        )
        resp.raise_for_status()
        ids = [str(item["id"]) for item in resp.json()]
        if ids:
            requests.delete(
                f"{API_URL}/payouts/", params={"ids": ",".join(ids)}
            )
            log(f"‚úÖ –ó–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–¥–∞–ª–µ–Ω—ã")
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ API: {e}")


def edit_request(user_id: Any, updates: Dict[str, Any]) -> None:
    """Edit the first request of a user via the API."""
    try:
        resp = requests.get(
            f"{API_URL}/payouts/", params={"employee_id": user_id}
        )
        resp.raise_for_status()
        items = resp.json()
        if not items:
            return
        payout_id = items[0]["id"]
        requests.put(f"{API_URL}/payouts/{payout_id}", json=updates)
        log(f"‚úÖ –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª—ë–Ω: {updates}")
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ API: {e}")


def delete_request_by_index(index: str) -> None:
    """Delete a request by its id via the API."""
    try:
        requests.delete(f"{API_URL}/payouts/{index}")
        log(f"‚úÖ –ó–∞–ø—Ä–æ—Å ‚Ññ{index} —É–¥–∞–ª—ë–Ω")
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ API: {e}")


def edit_request_by_index(index: str, updates: Dict[str, Any]) -> None:
    """Edit a request by id via the API."""
    try:
        requests.put(f"{API_URL}/payouts/{index}", json=updates)
        log(f"‚úÖ –ó–∞–ø—Ä–æ—Å ‚Ññ{index} –æ–±–Ω–æ–≤–ª—ë–Ω: {updates}")
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ API: {e}")
