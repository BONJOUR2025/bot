import os
import pandas as pd
import json
from fpdf import FPDF
from openpyxl import load_workbook
from ..config import EXCEL_FILE, ADVANCE_REQUESTS_FILE
from datetime import datetime
from ..utils.logger import log
import re
import textwrap


def unmerge_cells(sheet):
    """–†–∞–∑—ä–µ–¥–∏–Ω—è–µ—Ç –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–µ —è—á–µ–π–∫–∏ –∏ –∫–æ–ø–∏—Ä—É–µ—Ç –∏—Ö –∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ –≤—Å–µ —è—á–µ–π–∫–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞."""
    merged_ranges = list(sheet.merged_cells.ranges)
    for merged_range in merged_ranges:
        sheet.unmerge_cells(str(merged_range))
        top_left_value = sheet.cell(
            row=merged_range.min_row, column=merged_range.min_col
        ).value
        for row in range(merged_range.min_row, merged_range.max_row + 1):
            for col in range(merged_range.min_col, merged_range.max_col + 1):
                sheet.cell(row=row, column=col, value=top_left_value)
    return sheet


def get_cell_comment(sheet_name, row_index, column_letter):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π —è—á–µ–π–∫–∏ Excel."""
    if not os.path.exists(EXCEL_FILE):
        log(f"‚ùå Error: File {EXCEL_FILE} not found!")
        return "File error"
    try:
        workbook = load_workbook(EXCEL_FILE, data_only=False)
        if sheet_name not in workbook.sheetnames:
            log(f"‚ùå Error: Sheet {sheet_name} not found!")
            return "Sheet error"
        sheet = workbook[sheet_name]
        cell_ref = f"{column_letter}{row_index + 3}"
        cell = sheet[cell_ref]
        if cell.comment:
            return cell.comment.text.strip()
        else:
            return "No comment"
    except Exception as e:
        log(
            f"‚ùå Error loading comment from {column_letter}{row_index + 1}: {e}"
        )
        return "Error"


def load_data(sheet_name=None):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel.
    :param sheet_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ (–º–µ—Å—è—Ü) –∏–ª–∏ None –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ª–∏—Å—Ç–æ–≤.
    :return: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –ª–∏—Å—Ç–æ–≤.
    """
    if not os.path.exists(EXCEL_FILE):
        log(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª Excel –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ {EXCEL_FILE}")
        return None

    try:
        xls = pd.ExcelFile(EXCEL_FILE)
        log(
            f"üìÇ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–∏—Å—Ç—ã –≤ —Ñ–∞–π–ª–µ: {xls.sheet_names}"
        )  # ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –ª–∏—Å—Ç—ã

        if sheet_name is None:
            return xls.sheet_names  # –ï—Å–ª–∏ `None`, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ª–∏—Å—Ç–æ–≤

        if sheet_name not in xls.sheet_names:
            log(
                f"‚ùå –û—à–∏–±–∫–∞: –õ–∏—Å—Ç '{sheet_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω! –î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–∏—Å—Ç—ã: {xls.sheet_names}"
            )
            return None

        return pd.read_excel(xls, sheet_name=sheet_name, header=1)
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ Excel: {e}")
        return None


def update_cell(sheet_name, cell, value):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —è—á–µ–π–∫—É –≤ Excel."""
    try:
        workbook = load_workbook(EXCEL_FILE)
        sheet = workbook[sheet_name]
        if cell not in sheet:
            return False
        sheet[cell] = value
        workbook.save(EXCEL_FILE)
        return True
    except Exception as e:
        log(f"Error updating cell: {e}")
        return False


def export_to_csv(sheet_name="–Ø–ù–í–ê–†–¨"):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ CSV."""
    data = load_data(sheet_name)
    if data is not None:
        filename = f"data_{sheet_name}.csv"
        data.to_csv(filename, index=False, encoding="utf-8-sig")
        return filename
    return None


def export_to_pdf(sheet_name="–Ø–ù–í–ê–†–¨"):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ PDF."""
    try:
        from fpdf import FPDF

        data = load_data(sheet_name)
        if data is None:
            return None
        filename = f"data_{sheet_name}.pdf"
        pdf = FPDF()
        pdf.set_auto_page_break(auto=True, margin=15)
        pdf.add_page()
        pdf.set_font("Arial", size=10)
        pdf.cell(200, 10, f"Data for {sheet_name}", ln=True, align="C")
        for index, row in data.iterrows():
            row_text = " | ".join(str(x) for x in row)
            pdf.cell(200, 10, row_text, ln=True, align="L")
        pdf.output(filename)
        return filename
    except Exception as e:
        log(f"Error exporting to PDF: {e}")
        return None


def clean_line(text: str) -> str:
    return re.sub(r"[^\x00-\x7F–∞-—è–ê-–Ø—ë–Å0-9\s.,!?@\-:;()|‚ÇΩüí≥üè†‚úÖ‚ùå]+", "", text)


def export_advances_to_pdf(
    filter_type=None,
    status=None,
    name=None,
    method=None,
    after_date=None,
    before_date=None,
    filename="advance_report.pdf",
):
    try:
        with open(ADVANCE_REQUESTS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return None

    if not data:
        log("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return None

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
    def match_filters(entry):
        if filter_type and entry.get("payout_type") != filter_type:
            return False
        if status and entry.get("status") != status:
            return False
        if name and name.lower() not in str(entry.get("name", "")).lower():
            return False
        if method and entry.get("method") != method:
            return False
        if after_date:
            ts = entry.get("timestamp")
            if ts:
                try:
                    dt = datetime.strptime(ts, "%Y-%m-%d %H:%M:%S")
                    if dt < datetime.strptime(after_date, "%Y-%m-%d"):
                        return False
                except Exception:
                    return False
        if before_date:
            ts = entry.get("timestamp")
            if ts:
                try:
                    dt = datetime.strptime(ts, "%Y-%m-%d %H:%M:%S")
                    if dt > datetime.strptime(before_date, "%Y-%m-%d"):
                        return False
                except Exception:
                    return False
        return True

    data = [d for d in data if match_filters(d)]

    from ..config import FONT_PATH

    font_path = FONT_PATH
    bold_font = FONT_PATH.replace(".ttf", "-Bold.ttf")
    pdf = FPDF()
    pdf.add_page()
    if os.path.exists(font_path):
        pdf.add_font("DejaVu", "", font_path, uni=True)
        if os.path.exists(bold_font):
            pdf.add_font("DejaVu", "B", bold_font, uni=True)
        pdf.set_font("DejaVu", "", 10)
    else:
        log(
            f"‚ö†Ô∏è –®—Ä–∏—Ñ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {font_path}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Arial"
        )
        pdf.set_font("Arial", size=10)
    pdf.set_auto_page_break(auto=True, margin=15)

    pdf.cell(200, 10, "üìÑ –û—Ç—á—ë—Ç –ø–æ –≤—ã–ø–ª–∞—Ç–∞–º", ln=True, align="C")

    for idx, r in enumerate(data, 1):
        try:
            timestamp = str(r.get("timestamp", "‚Äî"))
            name_val = str(r.get("name", "‚Äî"))
            amount = str(r.get("amount", 0))
            method = str(r.get("method", "‚Äî"))
            payout_type = str(r.get("payout_type", "‚Äî"))
            status_val = str(r.get("status", "‚Äî"))

            line = f"{idx}) {timestamp} | {name_val} | {amount} ‚ÇΩ | {method} | {payout_type} | {status_val}"
            line = clean_line(line)

            if len(line) > 1000:
                line = line[:1000] + "..."

            for chunk in textwrap.wrap(line, width=110):
                pdf.cell(0, 8, txt=chunk, ln=True)
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {idx}: {e}")
            continue

    try:
        pdf.output(filename)
        log(f"‚úÖ PDF –æ—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {filename}")
        return filename
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è PDF: {e}")
        return None
